import category_theory.single_obj
       category_theory.functor
       category_theory.elements
       category_theory.action
       quiver
       misc
       displayed
open category_theory

universes u v

class is_free_group (G) [group.{u} G] :=
(gp_gens : Type u)
(gp_emb : gp_gens ‚Üí G)
(gp_lift {X} [group.{u} X] (f : gp_gens ‚Üí X) : ‚àÉ! F : G ‚Üí* X, ‚àÄ a, f a = F (gp_emb a))

class is_free_groupoid (G) [groupoid.{v u} G] :=
(gpd_gens : quiver.{v u} G)
(gpd_emb : qhom_over_id gpd_gens ‚ôØG)
(gpd_lift {X} [groupoid.{v u} X] (f : quiver_hom gpd_gens ‚ôØX) :
  ‚àÉ! F : functorial f.obj, ‚àÄ {x y : G} (a : gpd_gens x y), f.edge a = F.map' (gpd_emb a))

open is_free_group is_free_groupoid

instance free_groupoid_of_free_group (G) [group G] [is_free_group G] : is_free_groupoid (single_obj G) :=
{ gpd_gens := Œª _ _, gp_gens G,
  gpd_emb := Œª _ _ e, (gp_emb e : G),
  gpd_lift := Œª X _ f, begin
    resetI, cases f,
    have : ‚àÉ x : X, f_obj = Œª _, x := ‚ü®_, out_of_unit.mpr rfl‚ü©,
    rcases this with ‚ü®x, ‚ü®‚ü©‚ü©,
    let f' : (gp_gens G) ‚Üí End x := Œª a, @f_edge () () a,
    exact ((functorial_equiv x).exists_unique_congr (by tidy)).mpr (gp_lift f'),
  end }

-- a functor out of a free groupoid is determined by its values on the generating subquiver
lemma free_groupoid_ext {G X} [groupoid.{v u} G] [groupoid.{v u} X] [is_free_groupoid G]
   {ob : G ‚Üí X} {f g : functorial ob} :
  f = g ‚Üî ‚àÄ (x y : G) (a : gpd_gens x y), f.map' (gpd_emb a) = g.map' (gpd_emb a) :=
begin
  refine ‚ü®_, _‚ü©,
  { intros, cc },
  intro h,
  set f' : quiver_hom gpd_gens ‚ôØX := 
    { obj := ob, edge := Œª _ _ e, f.map' (gpd_emb e) },
  rcases gpd_lift f' with ‚ü®p, hp, up‚ü©,
  have : f = p, { apply up, intros, refl },
  have : g = p, { apply up, intros, apply h },
  cc
end

-- given a predicate on the morphisms of a free group, if we know that it holds on the generators,
-- and on identity morphisms, and is preserved by composition and inverse, then it holds everywhere
lemma free_groupoid_induction {G} [groupoid G] [is_free_groupoid G]
  {P : Œ† {a b : G}, (a ‚ü∂ b) ‚Üí Prop}
    (h_id : ‚àÄ a, P (ùüô a))
    (h_comp : ‚àÄ {a b c} {f : a ‚ü∂ b} {g : b ‚ü∂ c}, P f ‚Üí P g ‚Üí P (f ‚â´ g))
    (h_inv : ‚àÄ {a b} {f : a ‚ü∂ b}, P f ‚Üí P (inv f))
    (h_base : ‚àÄ {a b : G} (f : gpd_gens a b), P (gpd_emb f))
    : ‚àÄ a b (f : a ‚ü∂ b), P f :=
let subgpd : disp_groupoid G :=
{ obj := Œª _ , unit,
  mor := Œª _ _ p _ _, plift (P p),
  id := Œª a _, plift.up (h_id _),
  comp := Œª _ _ _ _ _ _ _ _ p q, plift.up (h_comp p.down q.down),
  inv := Œª _ _ _ _ _ p, plift.up (h_inv p.down),
  id_comp  := by { intros, cases F, apply heq_of_eq_mp; simp },
  comp_id  := by { intros, cases F, apply heq_of_eq_mp; simp },
  assoc    := by { intros, cases F, apply heq_of_eq_mp; simp },
  inv_comp := by { intros, cases F, apply heq_of_eq_mp; simp },
  comp_inv := by { intros, cases F, apply heq_of_eq_mp; simp } } in
let F : quiver_hom gpd_gens ‚ôØsubgpd.total :=
{ obj := Œª a, ‚ü®a, ()‚ü©, edge := Œª a b p, ‚ü®gpd_emb p, plift.up $ h_base p‚ü© } in
begin
  rcases gpd_lift F with ‚ü®Q, hQ, _‚ü©,
  introsI,
  convert (Q.map' f).snd.down,
  change category_theory.functorial_id.map' f = (functorial_comp F.obj subgpd.to_disp_cat.œÄ).map' f,
  congr,
  rw free_groupoid_ext,
  intros x y a,
  change (F.edge _).fst = (Q.map' _).fst,
  rw hQ,
end

-- being a free group is an isomorphism invariant
def is_free_group_mul_equiv {G H : Type u} [group G] [group H] [is_free_group G] (h : G ‚âÉ* H)
  : is_free_group H :=
{ gp_gens := gp_gens G,
  gp_emb := Œª a, h (gp_emb a),
  gp_lift := begin
    introsI X _ f,
    refine (equiv.exists_unique_congr (homset_equiv_of_mul_equiv h) _).mp (gp_lift f),
    intros F, apply forall_congr,
    intro, apply eq.congr,
    { refl },
    { change F _ = F _, simp },
  end }