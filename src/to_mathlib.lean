import category_theory.single_obj category_theory.elements algebra.category.Group group_theory.group_action

open category_theory function
universes v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ
-- this definition is copied from category_theory.functorial, except we make it a structure
-- rather than a class
@[ext]
structure functorial {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] 
  (F : C ‚Üí D) : Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(map       : Œ† {X Y : C}, (X ‚ü∂ Y) ‚Üí ((F X) ‚ü∂ (F Y)))
(map_id'   : ‚àÄ (X : C), map (ùüô X) = ùüô (F X) . obviously)
(map_comp' : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) . obviously)

def functorial_id (C) [category C] : functorial (id : C ‚Üí C) :=
{ map := Œª _ _, id }

def functorial_comp {C D E} [category C] [category E] [category D]
  {f : C ‚Üí D} {g : D ‚Üí E} : functorial f ‚Üí functorial g ‚Üí functorial (g ‚àò f) :=
Œª F G, { map := Œª x y p, G.map (F.map p),
         map_id' := Œª x, by rw [F.map_id', G.map_id'],
         map_comp' := Œª x y z f g, by rw [F.map_comp', G.map_comp'] }

/-- A functor out of single object category is just a monoid hom -/
def functor_equiv {M C} [monoid M] [category C] (c : C) :
functorial (Œª x : single_obj M, c) ‚âÉ (M ‚Üí* End c) :=
{ to_fun := Œª F, { to_fun   := Œª (m : End (single_obj.star M)), F.map m,
                   map_one' := F.map_id' _,
                   map_mul' := Œª _ _, F.map_comp' _ _ },
  inv_fun := Œª f, { map := Œª _ _, f,
                    map_id' := Œª _, f.map_one,
                    map_comp' := Œª _ _ _ _ _, f.map_mul _ _ },
  left_inv := by tidy,
  right_inv := by tidy }

-- two dependent functions out of unit are equal when they agree on ()
-- todo: can we make this @[simp]?
lemma out_of_unit {P : punit.{u} ‚Üí Type v} {f g : Œ† a, P a} : 
  f = g ‚Üî f punit.star = g punit.star :=
begin
  split,
  { cc },
  { intro h, funext, cases x, assumption },
end

-- any function out of unit is constant
lemma const_unit_surjective (A) : surjective (Œª (a : A) (x : punit.{u}), a) :=
by { intro f, use f punit.star, funext, cases x, refl }

lemma functorial_eq_to_hom_map {C D} [category C] [category D] (f : C ‚Üí D) (F : functorial f) {X Y : C} (p : X = Y) :
  F.map (eq_to_hom p) = eq_to_hom (congr_arg f p) :=
by { cases p, exact F.map_id' _}

instance {C} [category C] (F : C ‚•§ Type*) : faithful (category_of_elements.œÄ F) := 
by tidy

lemma heq_congr_arg‚ÇÇ {A : Sort u} {P Q : A ‚Üí Sort*} (f : Œ† a, P a ‚Üí Q a) :
‚àÄ a b c d, a = b ‚Üí c == d ‚Üí f a c == f b d :=
by cc

def equiv.set.congr.equiv {A B} (h : A ‚âÉ B) (s : set A) : s ‚âÉ (equiv.set.congr h s) :=
{ to_fun := Œª x, ‚ü®h x.val, ‚ü®_, x.property, rfl‚ü©‚ü©,
  inv_fun := Œª y, ‚ü®h.symm y, by { have : y.val ‚àà _ '' _ := y.property,
              rw h.image_eq_preimage at this,
              exact this, }‚ü©,
  left_inv := by tidy,
  right_inv := by tidy }

-- isomorphic objects have equivalent homsets
def iso_hom_equiv {C} [category C] {a b c : C} (h : a ‚âÖ b) : (a ‚ü∂ c) ‚âÉ (b ‚ü∂ c) := 
{ to_fun := (‚â´) h.inv,
  inv_fun := (‚â´) h.hom,
  left_inv := by tidy,
  right_inv := by tidy }

def homset_equiv_of_mul_equiv {G H K} [group G] [group H] [group K] (h : G ‚âÉ* H) :
  (G ‚Üí* K) ‚âÉ (H ‚Üí* K) :=
{ to_fun := Œª g, monoid_hom.comp g h.symm.to_monoid_hom,
  inv_fun := Œª g, monoid_hom.comp g h.to_monoid_hom,
  left_inv := by tidy,
  right_inv := by tidy }

lemma stabilizer_of_coset_action {G} [group G] {H : subgroup G} :
  @mul_action.stabilizer G (quotient_group.quotient H) _ _ (quotient_group.mk 1) = H :=
by { ext, change _ = _ ‚Üî _, rw eq_comm, convert quotient_group.eq, simp }