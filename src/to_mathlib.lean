import category_theory.single_obj

open category_theory function
universes v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ
-- this definition is copied from category_theory.functorial, except we make it a structure
-- rather than a class
@[ext]
structure functorial {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] 
  (F : C ‚Üí D) : Type (max v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(map       : Œ† {X Y : C}, (X ‚ü∂ Y) ‚Üí ((F X) ‚ü∂ (F Y)))
(map_id'   : ‚àÄ (X : C), map (ùüô X) = ùüô (F X) . obviously)
(map_comp' : ‚àÄ {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z), map (f ‚â´ g) = (map f) ‚â´ (map g) . obviously)

/-- A functor out of single object category is just a monoid hom -/
def functor_equiv {M C} [monoid M] [category C] (c : C) :
functorial (Œª x : single_obj M, c) ‚âÉ (M ‚Üí* End c) :=
{ to_fun := Œª F, { to_fun   := Œª (m : End (single_obj.star M)), F.map m,
                   map_one' := F.map_id' _,
                   map_mul' := Œª _ _, F.map_comp' _ _ },
  inv_fun := Œª f, { map := Œª _ _, f,
                    map_id' := Œª _, f.map_one,
                    map_comp' := Œª _ _ _ _ _, f.map_mul _ _ },
  left_inv := by tidy,
  right_inv := by tidy }

-- two dependent functions out of unit are equal when they agree on ()
-- todo: can we make this @[simp]?
lemma out_of_unit {P : punit.{u} ‚Üí Type v} {f g : Œ† a, P a} : 
  f = g ‚Üî f punit.star = g punit.star :=
begin
  split,
  { cc },
  intro h,
  funext,
  cases x,
  assumption,
end

-- any function out of unit is constant
lemma const_unit_surjective (A) : surjective (Œª (a : A) (x : punit.{u}), a) :=
begin
  intro f,
  use f punit.star,
  funext,
  cases x,
  refl, 
end