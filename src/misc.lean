import category_theory.single_obj 
       category_theory.functorial
       category_theory.action

open category_theory function quotient_group
universes v v‚ÇÅ v‚ÇÇ u u‚ÇÅ u‚ÇÇ

lemma functorial_eq_to_hom_map {C D} [category C] [category D] (f : C ‚Üí D) [functorial f] {X Y : C}
  (p : X = Y) : map f (eq_to_hom p) = eq_to_hom (congr_arg f p) :=
by { cases p, exact functorial.map_id }

instance {C} [category C] (F : C ‚•§ Type*) : faithful (category_of_elements.œÄ F) := 
by tidy

lemma heq_congr_arg‚ÇÇ {A : Sort u} {P Q : A ‚Üí Sort*} (f : Œ† a, P a ‚Üí Q a) :
‚àÄ a b c d, a = b ‚Üí c == d ‚Üí f a c == f b d :=
by cc

def equiv.set.congr.equiv {A B} (h : A ‚âÉ B) (s : set A) : s ‚âÉ (equiv.set.congr h s) :=
{ to_fun := Œª x, ‚ü®h x.val, ‚ü®_, x.property, rfl‚ü©‚ü©,
  inv_fun := Œª y, ‚ü®h.symm y, by { have : y.val ‚àà _ '' _ := y.property,
              rw h.image_eq_preimage at this,
              exact this, }‚ü©,
  left_inv := by tidy,
  right_inv := by tidy }

def homset_equiv_of_mul_equiv {G H K} [group G] [group H] [group K] (h : G ‚âÉ* H) :
  (G ‚Üí* K) ‚âÉ (H ‚Üí* K) :=
{ to_fun := Œª g, monoid_hom.comp g h.symm.to_monoid_hom,
  inv_fun := Œª g, monoid_hom.comp g h.to_monoid_hom,
  left_inv := by tidy,
  right_inv := by tidy }

lemma stabilizer_of_coset_action {G} [group G] {H : subgroup G} :
  mul_action.stabilizer G (default _ : quotient H) = H :=
by { ext, change _ = _ ‚Üî _, rw eq_comm, convert quotient_group.eq, simp }

lemma out_of_unit {P : punit.{u} ‚Üí Type v} {f g : Œ† a, P a} :
  f = g ‚Üî f punit.star = g punit.star :=
by tidy

-- we are going against the grain by trying to use `functorial` in a non-class way
def category_theory.functorial.map' {C D} [category C] [category D] {ob : C ‚Üí D} (F : functorial ob)
  {x y : C} : (x ‚ü∂ y) ‚Üí (ob x ‚ü∂ ob y) := @functorial.map C _ D _ ob F x y

lemma functorial_ext {C D} [category C] [category D] (ob : C ‚Üí D) :
  ‚àÄ (f g : functorial ob), f = g ‚Üî ‚àÄ (x y : C) (p : x ‚ü∂ y), f.map' p = g.map' p :=
begin
  intros f g,
  refine ‚ü®by cc, _‚ü©,
  { intro h, cases f, cases g, congr, funext, apply h }
end

/-- A functor out of single object category is just a monoid hom -/
def functorial_equiv {M C} [monoid M] [category C] (c : C) :
functorial (Œª x : single_obj M, c) ‚âÉ (M ‚Üí* End c) :=
{ to_fun := by { introI F, exact { to_fun   := Œª (m : End (single_obj.star M)), map (Œª _, c) m,
                   map_one' := functorial.map_id,
                   map_mul' := Œª _ _, functorial.map_comp' _ _ } },
  inv_fun := Œª f, { map := Œª _ _, f,
                    map_id' := Œª _, f.map_one,
                    map_comp' := Œª _ _ _ _ _, f.map_mul _ _ },
  left_inv := by { intro x, rw functorial_ext, rintros ‚ü®‚ü© ‚ü®‚ü© _, refl },
  right_inv := by tidy }

instance action_category_inhabited {M X} [monoid M] [mul_action M X] [inhabited X] :
  inhabited (action_category M X) := ‚ü®‚ü®single_obj.star M, (default _ : X)‚ü©‚ü©

def End_mul_equiv_subgroup {G} [group G] (H : subgroup G) : 
  End (default (action_category G $ quotient H)) ‚âÉ* H := 
begin
  refine mul_equiv.trans _ _,
  { exact mul_action.stabilizer G (default _ : quotient H) },
  { apply_instance },
  { apply mul_equiv.refl }, -- this is a heavy refl
  { rw stabilizer_of_coset_action },
end

lemma functorial.map_inv {C D} [groupoid C] [groupoid D] {ob : C ‚Üí D}
  [functorial ob] (a b : C) (p : a ‚ü∂ b) :
    map ob (inv p) = inv (map ob p) :=
begin
  suffices : map ob (inv p) = inv (map ob p) ‚â´ (ùüô _),
  { simp only [this, category.comp_id]},
  rw [is_iso.eq_inv_comp, ‚Üêfunctorial.map_comp],
  simp only [functorial.map_id, is_iso.hom_inv_id],
end