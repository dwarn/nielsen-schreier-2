import category_theory.category.Cat

-- this file contains the construction of displayed categories
-- see https://arxiv.org/pdf/1705.04296.pdf

open category_theory

variables (C : Type*) [category C]

structure displayed_category :=
(obj  : C ‚Üí Type*)
(mor  : Œ† {a b : C}, (a ‚ü∂ b) ‚Üí obj a ‚Üí obj b ‚Üí Type*)
(id   : Œ† {a : C} (x : obj a), mor (ùüô a) x x)
(comp : Œ† {a b c : C} {f : a ‚ü∂ b} {g : b ‚ü∂ c}
        {x : obj a} {y : obj b} {z : obj c},
          mor f x y ‚Üí mor g y z ‚Üí mor (f ‚â´ g) x z)
(comp_id : ‚àÄ {a b : C} {x : obj a} {y : obj b} {f : a ‚ü∂ b} (F : mor f x y),
              comp F (id y) == F )
(id_comp : ‚àÄ {a b : C} {x : obj a} {y : obj b} {f : a ‚ü∂ b} (F : mor f x y),
              comp (id x) F == F )
(assoc : ‚àÄ {a b c d : C} {x : obj a} {y : obj b} {z : obj c} {w : obj d}
              {f : a ‚ü∂ b} {g : b ‚ü∂ c} {h : c ‚ü∂ d}
                (F : mor f x y) (G : mor g y z) (H : mor h z w),
                  comp (comp F G) H == comp F (comp G H) )

variable {C}

-- a displayed category is also a genuine category
def total_category (D : displayed_category C) : Cat :=
{ Œ± := Œ£ c : C, D.obj c,
  str := { hom := Œª x y, Œ£ f : x.fst ‚ü∂ y.fst, D.mor f x.snd y.snd,
           id := Œª x, ‚ü®ùüô x.fst, D.id x.snd‚ü©,
           comp := Œª x y z F G, ‚ü®F.fst ‚â´ G.fst, D.comp F.snd G.snd‚ü©,
           id_comp' := by { intros, apply sigma.ext, { simp }, apply D.id_comp },
           comp_id' := by { intros, apply sigma.ext, { simp }, apply D.comp_id },
           assoc' := by { intros, apply sigma.ext, { simp }, apply D.assoc } } }
           -- probably the above proofs would be tidy if D has correct simp attributes

-- there are a lot of other things we could formalise, maybe the most obvious being the
-- forgetful functor from the total category to C.